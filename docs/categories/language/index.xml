<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>language on Hello Friend</title>
    <link>https://xuanyang-cn.github.io/categories/language/</link>
    <description>Recent content in language on Hello Friend</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Thu, 03 Nov 2022 13:30:01 +0800</lastBuildDate><atom:link href="https://xuanyang-cn.github.io/categories/language/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Python Type Hints</title>
      <link>https://xuanyang-cn.github.io/posts/2022/11/python-type-hints/</link>
      <pubDate>Thu, 03 Nov 2022 13:30:01 +0800</pubDate>
      
      <guid>https://xuanyang-cn.github.io/posts/2022/11/python-type-hints/</guid>
      <description>Note The Python runtime does not enforce function and variable type annotations. They can be used by third party tools such as type checkers, IDEs, linters, etc.
Type hints help document the code Type hints improve IDEs and linters Type hints help you build and maintain a cleaner architecture. Generics denote expected types for container elements.
from collections.abc import Sequence from typing import TypeVar T = TypeVar(&amp;#39;T&amp;#39;) # Declare type variable def first(l: Sequence[T]) -&amp;gt; T: # Generic function return l[0] Useful types in typing module typing.</description>
    </item>
    
    <item>
      <title>GO Module</title>
      <link>https://xuanyang-cn.github.io/posts/2021/03/go-module/</link>
      <pubDate>Fri, 26 Mar 2021 14:52:08 +0800</pubDate>
      
      <guid>https://xuanyang-cn.github.io/posts/2021/03/go-module/</guid>
      <description>Creating a new module // hello.go package hello func Hello() string { return &amp;#34;Hello, world.&amp;#34; } // hello_test.go package hello import &amp;#34;testing&amp;#34; func TestHello(t *testing.T){ want := &amp;#34;Hello, world.&amp;#34; if got := Hello(); got != want { t.Errorf(&amp;#34;Hello() = %q, want %q, got, want&amp;#34;) } } $ go test $ go mod init example.com/hello go mod init write a go.mod file.
Adding a dependence package hello import &amp;#34;rsc.io/quote&amp;#34; func Hello() string { return quote.</description>
    </item>
    
    <item>
      <title>Go profiling tools</title>
      <link>https://xuanyang-cn.github.io/posts/2021/03/go-profiling-tools/</link>
      <pubDate>Fri, 26 Mar 2021 14:52:08 +0800</pubDate>
      
      <guid>https://xuanyang-cn.github.io/posts/2021/03/go-profiling-tools/</guid>
      <description>How to profile in Go? How to choose tools for profiling? PProf: CPU, Mem, Goroutinue Blocking, Graphics, Goroutines, Mutexes
Trace: Goroutine creation/blocking/unblocking, syscall enter/exit/block, GC-related events, changes of heap size, processor start/stop, etc.
dlv: Single step debugging
gdb: Single step debugging
Basic Usages of Tools 1. GCTRACE gctrace: setting gctrace=1 causes the garbage collector to emit a single line to standard error at each collection, summarizing the amount of memory collected and the length of the pause.</description>
    </item>
    
    <item>
      <title>Cgo: All You Need to Know</title>
      <link>https://xuanyang-cn.github.io/posts/2021/02/cgo-all-you-need-to-know/</link>
      <pubDate>Tue, 23 Feb 2021 16:05:20 +0800</pubDate>
      
      <guid>https://xuanyang-cn.github.io/posts/2021/02/cgo-all-you-need-to-know/</guid>
      <description>Cgo Intro Cgo 让 GO 可以调用 C 的代码。
接下来就用一个简单的例子来介绍 Cgo 的用法。
下面 GO 的 rand 包提供了两个方法 Random 和 Seed， 它们分别调用了 C 的 random 和 srandom 方法。
package rand /* #include &amp;lt;stdlib.h&amp;gt; */ import &amp;#34;C&amp;#34; func Random() int { return int(C.random()) } func Seed(i int) { C.srandom(C.uint(i)) } // ref@https://blog.golang.org/cgo 从 import 语句来看，rand 包引入了 &amp;quot;C&amp;quot;， 但是你会发现标准 Go library 里并没有 C 这个库。这是因为 C 是一个伪包 (pesudo-package)，是一个可以被 cgo 解析的特殊名字，用来确定代码里 C 的命名空间。
rand 包用到 C 的地方有 4 个：C.</description>
    </item>
    
    <item>
      <title>Delve Hand Book</title>
      <link>https://xuanyang-cn.github.io/posts/2021/02/delve-hand-book/</link>
      <pubDate>Thu, 18 Feb 2021 15:34:42 +0800</pubDate>
      
      <guid>https://xuanyang-cn.github.io/posts/2021/02/delve-hand-book/</guid>
      <description>Launch a session dlv debug works like go run, it will build an run a GO package
dlv exec will start a seesion with a precompiled binary, in order to properly debug a binary, it shoud be compiled with optimizations disablesd, eg. with -gcflags=&amp;quot;all=-N -l&amp;quot;
dlv attach will attach to a PID of a runnig Go binary
Delve commands in a debugging session print, p
whatis will print the datatype of an expression</description>
    </item>
    
  </channel>
</rss>
