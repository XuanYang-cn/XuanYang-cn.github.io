<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on Hello Friend</title>
    <link>https://xuanyang-cn.github.io/categories/python/</link>
    <description>Recent content in python on Hello Friend</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Thu, 03 Nov 2022 13:30:01 +0800</lastBuildDate><atom:link href="https://xuanyang-cn.github.io/categories/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Python Type Hints</title>
      <link>https://xuanyang-cn.github.io/posts/2022/11/python-type-hints/</link>
      <pubDate>Thu, 03 Nov 2022 13:30:01 +0800</pubDate>
      
      <guid>https://xuanyang-cn.github.io/posts/2022/11/python-type-hints/</guid>
      <description>Note The Python runtime does not enforce function and variable type annotations. They can be used by third party tools such as type checkers, IDEs, linters, etc.
Type hints help document the code Type hints improve IDEs and linters Type hints help you build and maintain a cleaner architecture. Generics denote expected types for container elements.
from collections.abc import Sequence from typing import TypeVar T = TypeVar(&amp;#39;T&amp;#39;) # Declare type variable def first(l: Sequence[T]) -&amp;gt; T: # Generic function return l[0] Useful types in typing module typing.</description>
    </item>
    
  </channel>
</rss>
