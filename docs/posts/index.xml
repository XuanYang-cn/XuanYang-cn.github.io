<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Hello Friend</title>
        <link>https://xuanyang-cn.github.io/posts/</link>
        <description>Recent content in Posts on Hello Friend</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Tue, 22 Nov 2022 18:30:27 +0800</lastBuildDate>
        <atom:link href="https://xuanyang-cn.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>How To Build Develop Environment with Vim</title>
            <link>https://xuanyang-cn.github.io/posts/2022/11/how-to-build-develop-environment-with-vim/</link>
            <pubDate>Tue, 22 Nov 2022 18:30:27 +0800</pubDate>
            
            <guid>https://xuanyang-cn.github.io/posts/2022/11/how-to-build-develop-environment-with-vim/</guid>
            <description>This article helps myself to quickly establish a workable environments in Ubuntu with vim for
 The following languages: Golang, Python, CPP, MarkDown. Auto completion, jump to definition, rename variables, jump to files, jump to greps, auto lint Shell tools: git, rg, hugo, etc.  Just use docker  Download docker Use Dockerfile  I have a really Ubuntu 1. Install essentials Maybe important $ sudp apt update &amp;amp;&amp;amp; apt install wget curl ca-certificates build-essential gnupg2 lcov libtool m4 autoconf automake libssl-dev zlib1g-dev libboost-all-dev libboost-program-options-dev libboost-system-dev libboost-filesystem-dev libboost-serialization-dev libboost-python-dev libboost-regex-dev libcurl4-openssl-dev libtbb-dev libzstd-dev libaio-dev uuid-dev libpulse-dev netcat iputils-ping liblapack3 libblas-dev liblapack-dev Very important $ sudo apt update &amp;amp;&amp;amp; apt install g++ gcc gfortran git make ccache python3 python3-dev python3-pip gdb gdbserver htop tig zsh vim language-pack-en xmodmap hugo ripgrep global universal-ctags terminator $ sudo apt remove --purge -y &amp;amp;&amp;amp; sudo rm -rf /var/lib/apt/lists/* # install CMake $ wget -qO- &amp;#34;https://github.</description>
            <content type="html"><![CDATA[<p>This article helps myself to quickly establish a workable environments in Ubuntu with vim for</p>
<ul>
<li>The following languages: Golang, Python, CPP, MarkDown.</li>
<li>Auto completion, jump to definition, rename variables, jump to files, jump to greps, auto lint</li>
<li>Shell tools: git, rg, hugo, etc.</li>
</ul>
<h2 id="just-use-docker">Just use docker</h2>
<ol>
<li>Download docker</li>
<li>Use <a href="https://raw.githubusercontent.com/XuanYang-cn/XuanYang-cn.github.io/master/content/posts/OS/Dockerfile">Dockerfile</a></li>
</ol>
<h2 id="i-have-a-really-ubuntu">I have a really Ubuntu</h2>
<h3 id="1-install-essentials">1. Install essentials</h3>
<h4 id="maybe-important">Maybe important</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ sudp apt update <span style="color:#f92672">&amp;&amp;</span> apt install wget curl ca-certificates build-essential gnupg2 lcov libtool m4 autoconf automake libssl-dev zlib1g-dev libboost-all-dev libboost-program-options-dev libboost-system-dev libboost-filesystem-dev libboost-serialization-dev libboost-python-dev libboost-regex-dev libcurl4-openssl-dev libtbb-dev libzstd-dev libaio-dev uuid-dev libpulse-dev netcat iputils-ping liblapack3 libblas-dev liblapack-dev
</code></pre></div><h4 id="very-important">Very important</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ sudo apt update <span style="color:#f92672">&amp;&amp;</span> apt install g++ gcc gfortran git make ccache python3 python3-dev python3-pip gdb gdbserver htop tig zsh vim language-pack-en xmodmap hugo ripgrep global universal-ctags terminator
$ sudo apt remove --purge -y <span style="color:#f92672">&amp;&amp;</span> sudo rm -rf /var/lib/apt/lists/*
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#75715e"># install CMake</span>
$ wget -qO- <span style="color:#e6db74">&#34;https://github.com/Kitware/CMake/releases/download/v3.24.3/cmake-3.24.3-linux-x86_64.tar.gz&#34;</span> | tar --strip-components<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span> -xz -C /usr/local

<span style="color:#75715e"># Setting up zsh</span>
$ chsh -s <span style="color:#66d9ef">$(</span>which zsh<span style="color:#66d9ef">)</span> <span style="color:#f92672">&amp;&amp;</span> $SHELL --version
$ pip install powerline-status
$ sh -c <span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span>
$ git clone https://github.com/powerline/fonts.git --depth<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span> <span style="color:#f92672">&amp;&amp;</span> cd fonts <span style="color:#f92672">&amp;&amp;</span> ./install.sh <span style="color:#f92672">&amp;&amp;</span> cd .. <span style="color:#f92672">&amp;&amp;</span> rm -rf fonts
$ wget -c <span style="color:#e6db74">&#34;https://raw.githubusercontent.com/XuanYang-cn/Stones/master/vim/.zshrc_ubuntu&#34;</span> -O $HOME/.zshrc
$ git clone https://github.com/zdharma-continuum/history-search-multi-word.git <span style="color:#e6db74">${</span>ZSH_CUSTOM<span style="color:#66d9ef">:-</span>~/.oh-my-zsh/custom<span style="color:#e6db74">}</span>/plugins/history-search-multi-word
$ git clone https://github.com/zsh-users/zsh-syntax-highlighting.git <span style="color:#e6db74">${</span>ZSH_CUSTOM<span style="color:#66d9ef">:-</span>~/.oh-my-zsh/custom<span style="color:#e6db74">}</span>/plugins/zsh-syntax-highlighting
$ wget -c <span style="color:#e6db74">&#34;https://raw.githubusercontent.com/XuanYang-cn/Stones/master/vim/.vimrc_ubuntu&#34;</span> -O $HOME/.vimrc
$ curl -fLo $HOME/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#75715e"># Setting up python work space</span>
$ python3 -m pip install --user virtualenv virtualenvwrapper

<span style="color:#75715e"># Setting up golang work space</span>
$ export GO_TARBALL<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;go1.18.3.linux-amd64.tar.gz&#34;</span>
$ export GOPATH<span style="color:#f92672">=</span>$HOME/go
$ curl -fsSL <span style="color:#e6db74">&#34;https://golang.org/dl/</span><span style="color:#e6db74">${</span>GO_TARBALL<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span> --output <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>GO_TARBALL<span style="color:#e6db74">}</span><span style="color:#e6db74">
</span><span style="color:#e6db74"></span>$<span style="color:#e6db74"> tar xzf &#34;</span><span style="color:#e6db74">${</span>GO_TARBALL<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34; -C /usr/local &amp;&amp; rm &#34;</span><span style="color:#e6db74">${</span>GO_TARBALL<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34; &amp;&amp; mkdir -p &#34;</span><span style="color:#e6db74">${</span>GOPATH<span style="color:#e6db74">}</span>/bin<span style="color:#e6db74">&#34;
</span><span style="color:#e6db74"></span>$<span style="color:#e6db74"> curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b </span><span style="color:#e6db74">${</span>GOPATH<span style="color:#e6db74">}</span><span style="color:#e6db74">/bin v1.46.2
</span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#75715e"># Install Openblas</span>
$ wget https://github.com/xianyi/OpenBLAS/archive/v0.3.21.tar.gz
$ tar zxvf v0.3.21.tar.gz <span style="color:#f92672">&amp;&amp;</span> cd OpenBLAS-0.3.21
$ make NO_STATIC<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span> NO_LAPACK<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span> NO_LAPACKE<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span> NO_CBLAS<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span> NO_AFFINITY<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span> USE_OPENMP<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span> TARGET<span style="color:#f92672">=</span>HASWELL DYNAMIC_ARCH<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span> <span style="color:#ae81ff">\ </span>NUM_THREADS<span style="color:#f92672">=</span><span style="color:#ae81ff">64</span> MAJOR_VERSION<span style="color:#f92672">=</span><span style="color:#ae81ff">3</span> libs shared
$ make PREFIX<span style="color:#f92672">=</span>/usr/local NUM_THREADS<span style="color:#f92672">=</span><span style="color:#ae81ff">64</span> MAJOR_VERSION<span style="color:#f92672">=</span><span style="color:#ae81ff">3</span> install
$ rm -f /usr/local/include/cblas.h /usr/local/include/lapack*
$ cd .. <span style="color:#f92672">&amp;&amp;</span> rm -rf OpenBLAS-0.3.21 <span style="color:#f92672">&amp;&amp;</span> rm v0.3.21.tar.gz
</code></pre></div><p><strong>Don&rsquo;t forget to compile YouCompleteMe!</strong></p>
<h4 id="resources-might-be-useful">Resources might be useful</h4>
<table>
<thead>
<tr>
<th>Plugin</th>
<th>URL</th>
</tr>
</thead>
<tbody>
<tr>
<td>YouCompleteMe</td>
<td><a href="https://github.com/ycm-core/YouCompleteMe">https://github.com/ycm-core/YouCompleteMe</a></td>
</tr>
<tr>
<td>ale</td>
<td><a href="https://github.com/dense-analysis/ale">https://github.com/dense-analysis/ale</a></td>
</tr>
<tr>
<td>LeaderF</td>
<td><a href="https://github.com/Yggdroot/LeaderF">https://github.com/Yggdroot/LeaderF</a></td>
</tr>
<tr>
<td>gtags</td>
<td><code>man gtags.conf</code></td>
</tr>
</tbody>
</table>
]]></content>
        </item>
        
        <item>
            <title>Python Type Hints</title>
            <link>https://xuanyang-cn.github.io/posts/2022/11/python-type-hints/</link>
            <pubDate>Thu, 03 Nov 2022 13:30:01 +0800</pubDate>
            
            <guid>https://xuanyang-cn.github.io/posts/2022/11/python-type-hints/</guid>
            <description>Note The Python runtime does not enforce function and variable type annotations. They can be used by third party tools such as type checkers, IDEs, linters, etc.
  Type hints help document the code Type hints improve IDEs and linters Type hints help you build and maintain a cleaner architecture.  Generics denote expected types for container elements.
from collections.abc import Sequence from typing import TypeVar T = TypeVar(&amp;#39;T&amp;#39;) # Declare type variable def first(l: Sequence[T]) -&amp;gt; T: # Generic function return l[0] Useful types in typing module typing.</description>
            <content type="html"><![CDATA[<blockquote>
<p>Note The Python runtime does not enforce function and variable type annotations.
They can be used by third party tools such as type checkers, IDEs, linters, etc.</p>
</blockquote>
<ol>
<li>Type hints help document the code</li>
<li>Type hints improve IDEs and linters</li>
<li>Type hints help you build and maintain a cleaner architecture.</li>
</ol>
<h2 id="generics">Generics</h2>
<p>denote expected types for container elements.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> collections.abc <span style="color:#f92672">import</span> Sequence
<span style="color:#f92672">from</span> typing <span style="color:#f92672">import</span> TypeVar

T <span style="color:#f92672">=</span> TypeVar(<span style="color:#e6db74">&#39;T&#39;</span>)      <span style="color:#75715e"># Declare type variable</span>

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">first</span>(l: Sequence[T]) <span style="color:#f92672">-&gt;</span> T:   <span style="color:#75715e"># Generic function</span>
    <span style="color:#66d9ef">return</span> l[<span style="color:#ae81ff">0</span>]
</code></pre></div><h2 id="useful-types-in-typing-module">Useful types in <code>typing</code> module</h2>
<p><strong>typing.Any</strong></p>
<p>A static type checker will treat every type as being compatible with Any and Any as being compatible with every type.</p>
<p><strong>typing.NoReturn</strong></p>
<p><strong>typing.TypeAlias (3.10)</strong></p>
<p><strong>typing.Tuple</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> typing imporg Tuple

Tuple[int, str, float]
<span style="color:#75715e"># A type of tuple with three items with</span>
<span style="color:#75715e"># the first item type int</span>
<span style="color:#75715e"># the second item type str</span>
<span style="color:#75715e"># the third item type float</span>

Tuple[int, <span style="color:#f92672">...</span>]
Tuple[()] <span style="color:#75715e"># empty tuple</span>
</code></pre></div><p><strong>typing.Union</strong></p>
<p><code>Union[X, Y]</code> is equivalent to <code>X | Y</code> and means either X or Y</p>
<p><strong>typing.Optional</strong>
<code>Optional[X]</code> is equal to <code>X | None</code> or <code>Union[X, None]</code></p>
<p><strong>typing.Callable</strong>
Callable type; <code>Callable[[int], str]</code> is a function of <code>(int) -&gt; str</code>.</p>
<h2 id="some-examples-to-use-type-hints">Some examples to use type hints</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">name: str <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Guido&#34;</span>
pi: float <span style="color:#f92672">=</span> <span style="color:#ae81ff">3.142</span>
centered: bool <span style="color:#f92672">=</span> <span style="color:#66d9ef">False</span>

names: list <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#34;Guido&#34;</span>, <span style="color:#e6db74">&#34;Jukka&#34;</span>, <span style="color:#e6db74">&#34;Ivan&#34;</span>]
version: tuple <span style="color:#f92672">=</span> (<span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">7</span>, <span style="color:#ae81ff">1</span>)
options: dict <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#34;centered&#34;</span>: <span style="color:#66d9ef">False</span>, <span style="color:#e6db74">&#34;capitalize&#34;</span>: <span style="color:#66d9ef">True</span>}

<span style="color:#f92672">from</span> typing <span style="color:#f92672">import</span> Dict, List, Tuple
names: List[str] <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#34;Guido&#34;</span>, <span style="color:#e6db74">&#34;Jukka&#34;</span>, <span style="color:#e6db74">&#34;Ivan&#34;</span>]
version: Tuple[int, int, int] <span style="color:#f92672">=</span> (<span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">7</span>, <span style="color:#ae81ff">1</span>)
options: Dict[str, bool] <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#34;centered&#34;</span>: <span style="color:#66d9ef">False</span>, <span style="color:#e6db74">&#34;capitalize&#34;</span>: <span style="color:#66d9ef">True</span>}
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">create_deck</span>(shuffle: bool <span style="color:#f92672">=</span> <span style="color:#66d9ef">False</span>) <span style="color:#f92672">-&gt;</span> List[Tuple[str, str]]:
    <span style="color:#e6db74">&#34;&#34;&#34;Create a new deck of 52 cards&#34;&#34;&#34;</span>
    deck <span style="color:#f92672">=</span> [(s, r) <span style="color:#66d9ef">for</span> r <span style="color:#f92672">in</span> RANKS <span style="color:#66d9ef">for</span> s <span style="color:#f92672">in</span> SUITS]
    <span style="color:#66d9ef">if</span> shuffle:
        random<span style="color:#f92672">.</span>shuffle(deck)
    <span style="color:#66d9ef">return</span> deck
</code></pre></div><p><strong>References:</strong></p>
<p>[1] <a href="https://docs.python.org/3/library/typing.html">typing documentation</a>
[2] <a href="https://realpython.com/python-type-checking/#pros-and-cons">typing instruction</a>
[3] <a href="https://www.python.org/dev/peps/pep-0483/">PEP 483 The Theory of Type Hints</a>
[4] <a href="https://www.python.org/dev/peps/pep-0484/">PEP 484 Type Hints</a>
[5] <a href="https://www.python.org/dev/peps/pep-0526/">PEP 526 Syntax for Variable Annotations</a></p>
]]></content>
        </item>
        
        <item>
            <title>Clean Code 1: Names</title>
            <link>https://xuanyang-cn.github.io/posts/2022/03/clean-code-1-names/</link>
            <pubDate>Sat, 26 Mar 2022 12:35:00 +0800</pubDate>
            
            <guid>https://xuanyang-cn.github.io/posts/2022/03/clean-code-1-names/</guid>
            <description>If we all checked-in our code a little cleaner than when we checked it out, the code simply could not rot.
 Clean Code 1: Names 1. Choose your name thoughtfully. 2. Communicate your intent. Intervals! (a, b) open [a, b] closed (a, b] open left [a, b) open right 3. Avoid Disinformation. 4. Pronounceable Names.  Methods: verb Classes: noun Boolean: isEnough Enum: adjective  5. Avoid Encodings. // Avoid psz int *pszBasket 6.</description>
            <content type="html"><![CDATA[<blockquote>
<p>If we all checked-in our code a little cleaner than when we checked it out, the code simply could not rot.</p>
</blockquote>
<h1 id="clean-code-1-names">Clean Code 1: Names</h1>
<h2 id="1-choose-your-name-thoughtfully">1. Choose your name thoughtfully.</h2>
<h2 id="2-communicate-your-intent">2. Communicate your intent.</h2>
<pre tabindex="0"><code>Intervals!
(a, b) open
[a, b] closed
(a, b] open left
[a, b) open right
</code></pre><h2 id="3-avoid-disinformation">3. Avoid Disinformation.</h2>
<h2 id="4-pronounceable-names">4. Pronounceable Names.</h2>
<ul>
<li>Methods: verb</li>
<li>Classes: noun</li>
<li>Boolean: <em>isEnough</em></li>
<li>Enum: adjective</li>
</ul>
<h2 id="5-avoid-encodings">5. Avoid Encodings.</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#75715e">// Avoid psz
</span><span style="color:#75715e"></span><span style="color:#66d9ef">int</span> <span style="color:#f92672">*</span>pszBasket
</code></pre></div><h2 id="6-choose-parts-of-speech-well">6. Choose Parts of Speech Well</h2>
<blockquote>
<p>Clean code always reads like well-written prose. —— Grady Booch</p>
</blockquote>
<h2 id="7-the-scope-rule">7. The Scope Rule.</h2>
<ul>
<li>Variable names: the shorter scope, the shorter name; the longer scope, the longer meaningful names.</li>
<li>Method/Class names: the longer scope, the shorter name, like <code>Open</code>.</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>WiscKey 论文阅读笔记</title>
            <link>https://xuanyang-cn.github.io/posts/2022/03/wisckey-%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</link>
            <pubDate>Sat, 26 Mar 2022 12:30:00 +0800</pubDate>
            
            <guid>https://xuanyang-cn.github.io/posts/2022/03/wisckey-%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</guid>
            <description>WiscKey 论文阅读笔记 WiscKey: Separating Keys from Values in SSD-conscious Storage
1. 资源 论文：
 Lanyue Lu, Thanumalayan Sankaranarayana Pillai, Andrea C. Arpaci-Dusseau, and Remzi H. Arpaci-Dusseau. 2016. WiscKey: Separating keys from values in SSD-conscious storage. In Proceedings of the 14th USENIX Conference on File and Storage Technologies (FAST’16). https://dl.acm.org/doi/pdf/10.1145/3033273 Lanyue Lu, Thanumalayan Sankaranarayana Pillai, Hariharan Gopalakrishnan, Andrea C. Arpaci- Dusseau, and Remzi H. Arpaci-Dusseau. 2017. WiscKey: Separating keys from values in SSD-conscious storage.</description>
            <content type="html"><![CDATA[<h1 id="wisckey-论文阅读笔记">WiscKey 论文阅读笔记</h1>
<p>WiscKey: Separating Keys from Values in SSD-conscious Storage</p>
<h2 id="1-资源">1. 资源</h2>
<p>论文：</p>
<ul>
<li>Lanyue Lu, Thanumalayan Sankaranarayana Pillai, Andrea C. Arpaci-Dusseau, and Remzi H. Arpaci-Dusseau. 2016. WiscKey: Separating keys from values in SSD-conscious storage. In <em>Proceedings of the 14th USENIX Conference on File and Storage Technologies (FAST’16)</em>. <a href="https://dl.acm.org/doi/pdf/10.1145/3033273">https://dl.acm.org/doi/pdf/10.1145/3033273</a></li>
<li>Lanyue Lu, Thanumalayan Sankaranarayana Pillai, Hariharan Gopalakrishnan, Andrea C. Arpaci- Dusseau, and Remzi H. Arpaci-Dusseau. 2017. WiscKey: Separating keys from values in SSD-conscious storage. ACM Trans. Storage 13, 1, Article 5 (March 2017), 28 pages. <a href="https://www.usenix.org/system/files/conference/fast16/fast16-papers-lu.pdf">https://www.usenix.org/system/files/conference/fast16/fast16-papers-lu.pdf</a></li>
</ul>
<p><a href="http://0b4af6cdc2f0c5998459-c0245c5c937c5dedcca3f1764ecc9b2f.r43.cf2.rackcdn.com/fast16/lu.mp3">fast2016 Conference 上演讲语音记录</a></p>
<p><a href="https://www.usenix.org/sites/default/files/conference/protected-files/fast16_slides_lu.pdf">演讲幻灯片</a></p>
<h2 id="2-论文总结">2. 论文总结</h2>
<h3 id="21-the-problem">2.1 The problem</h3>
<p>LevelDB</p>
<ul>
<li>写放大</li>
<li>LevelDB 是为了 HDD 设计的，没有针对 SSD 的优化</li>
</ul>
<h3 id="22-the-solution">2.2 The solution</h3>
<ul>
<li>
<p>基于 LevelDB 做优化。</p>
</li>
<li>
<p>分离 key 和 value，使用 SSD 的特性。</p>
<ul>
<li>将 key 和 <strong>value 的地址</strong>存储在 LST-tree 中；将 key 和 value 存储在<strong>只能追加</strong>的 <code>value-log</code> 中。</li>
<li>每次 load ，先追加到 <code>value-log</code>，再插入到 LSM-tree。</li>
<li>每次 query，先从 LSM-tree 中找 key 和 value 的地址，然后在 <code>value-log</code> 中点查 value。</li>
<li>range query 利用 SSD 多线程随机查询的性能优势。</li>
<li>引入 GC 来解决更新和删除的问题，释放 <code>value-log</code> 的空间：从 <code>value-log</code> 头读，拿 Key 去 LST-tree 中查找，有效的话再追加到 <code>value-log</code> 末尾*</li>
</ul>
</li>
</ul>
<h3 id="23-pros-vs-cons-in-theory">2.3 Pros vs. Cons in theory</h3>
<table>
<thead>
<tr>
<th></th>
<th>Pros</th>
<th>Cons</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>缩小 LSM-tree 大小, 从理论上减少 写放大</td>
<td>每次 GC，没有更新或删除的数据还会被重新写一次，会增加一次写放大。</td>
</tr>
<tr>
<td>2</td>
<td>Range query 利用 SSD 多线程随机读不弱于顺序读的性能</td>
<td>故障恢复难度增加</td>
</tr>
</tbody>
</table>
<h3 id="24-experiments">2.4 Experiments</h3>
<ol>
<li>测试 LevelDB 的读写放大。</li>
<li>测试了 SSD 顺序读和随机读的性能。</li>
<li>和 LevelDB 在 Load/Query/Range Query 的性能对比测试，写放大测试，测试平台是 LevelDB 的 microbenchmark。</li>
<li>和 LevelDB、RocksDB 在 YCSB 上的测试。</li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>GO Module</title>
            <link>https://xuanyang-cn.github.io/posts/2021/03/go-module/</link>
            <pubDate>Fri, 26 Mar 2021 14:52:08 +0800</pubDate>
            
            <guid>https://xuanyang-cn.github.io/posts/2021/03/go-module/</guid>
            <description>Creating a new module // hello.go package hello func Hello() string { return &amp;#34;Hello, world.&amp;#34; } // hello_test.go package hello import &amp;#34;testing&amp;#34; func TestHello(t *testing.T){ want := &amp;#34;Hello, world.&amp;#34; if got := Hello(); got != want { t.Errorf(&amp;#34;Hello() = %q, want %q, got, want&amp;#34;) } } $ go test $ go mod init example.com/hello go mod init write a go.mod file.
Adding a dependence package hello import &amp;#34;rsc.io/quote&amp;#34; func Hello() string { return quote.</description>
            <content type="html"><![CDATA[<h2 id="creating-a-new-module">Creating a new module</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#75715e">// hello.go
</span><span style="color:#75715e"></span><span style="color:#f92672">package</span> <span style="color:#a6e22e">hello</span>

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">Hello</span>() <span style="color:#66d9ef">string</span> {
    <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;Hello, world.&#34;</span>
}
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#75715e">// hello_test.go
</span><span style="color:#75715e"></span><span style="color:#f92672">package</span> <span style="color:#a6e22e">hello</span>

<span style="color:#f92672">import</span> <span style="color:#e6db74">&#34;testing&#34;</span>

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">TestHello</span>(<span style="color:#a6e22e">t</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">testing</span>.<span style="color:#a6e22e">T</span>){
    <span style="color:#a6e22e">want</span> <span style="color:#f92672">:=</span> <span style="color:#e6db74">&#34;Hello, world.&#34;</span>
    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">got</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">Hello</span>(); <span style="color:#a6e22e">got</span> <span style="color:#f92672">!=</span> <span style="color:#a6e22e">want</span> {
        <span style="color:#a6e22e">t</span>.<span style="color:#a6e22e">Errorf</span>(<span style="color:#e6db74">&#34;Hello() = %q, want %q, got, want&#34;</span>)
    }
}
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ go test
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ go mod init example.com/hello
</code></pre></div><p><code>go mod init</code> write a <code>go.mod</code> file.</p>
<h2 id="adding-a-dependence">Adding a dependence</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#f92672">package</span> <span style="color:#a6e22e">hello</span>

<span style="color:#f92672">import</span> <span style="color:#e6db74">&#34;rsc.io/quote&#34;</span>

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">Hello</span>() <span style="color:#66d9ef">string</span> {
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">quote</span>.<span style="color:#a6e22e">Hello</span>()
}
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ go test
</code></pre></div><p><code>go list -m</code> lists the current module and all its dependencies</p>
<h2 id="upgrading-dependencies">Upgrading dependencies</h2>
]]></content>
        </item>
        
        <item>
            <title>Go profiling tools</title>
            <link>https://xuanyang-cn.github.io/posts/2021/03/go-profiling-tools/</link>
            <pubDate>Fri, 26 Mar 2021 14:52:08 +0800</pubDate>
            
            <guid>https://xuanyang-cn.github.io/posts/2021/03/go-profiling-tools/</guid>
            <description>How to profile in Go? How to choose tools for profiling? PProf: CPU, Mem, Goroutinue Blocking, Graphics, Goroutines, Mutexes
Trace: Goroutine creation/blocking/unblocking, syscall enter/exit/block, GC-related events, changes of heap size, processor start/stop, etc.
dlv: Single step debugging
gdb: Single step debugging
Basic Usages of Tools 1. GCTRACE  gctrace: setting gctrace=1 causes the garbage collector to emit a single line to standard error at each collection, summarizing the amount of memory collected and the length of the pause.</description>
            <content type="html"><![CDATA[<h1 id="how-to-profile-in-go">How to profile in Go?</h1>
<h2 id="how-to-choose-tools-for-profiling">How to choose tools for profiling?</h2>
<p><strong>PProf:</strong> CPU, Mem, Goroutinue Blocking, Graphics, Goroutines, Mutexes</p>
<p><strong>Trace:</strong> Goroutine creation/blocking/unblocking, syscall enter/exit/block, GC-related events, changes of heap size, processor start/stop, etc.</p>
<p><strong>dlv:</strong> Single step debugging</p>
<p><strong>gdb:</strong> Single step debugging</p>
<h2 id="basic-usages-of-tools">Basic Usages of Tools</h2>
<h3 id="1-gctrace">1. GCTRACE</h3>
<blockquote>
<p>gctrace: setting gctrace=1 causes the garbage collector to emit a single line to standard
error at each collection, summarizing the amount of memory collected and the
length of the pause. The format of this line is subject to change.
Currently, it is:</p>
</blockquote>
<pre tabindex="0"><code>    gc # @#s #%: #+#+# ms clock, #+#/#/#+# ms cpu, #-&gt;#-&gt;# MB, # MB goal, # P
</code></pre><p>where the fields are as follows:</p>
<pre tabindex="0"><code>    gc #        the GC number, incremented at each GC
    @#s         time in seconds since program start
    #%          percentage of time spent in GC since program start
    #+...+#     wall-clock/CPU times for the phases of the GC
    #-&gt;#-&gt;# MB  heap size at GC start, at GC end, and live heap
    # MB goal   goal heap size
    # P         number of processors used
</code></pre><p>Change environment variable <code>GODEBUG='gctrace=1'</code>, then Go will output gc log to stdout.</p>
<pre tabindex="0"><code>gc 21 @8.223s 0% 0.032+3.0+0.12ms clock, 1.6+2.8/14/10+4.0 ms cpu, 87-&gt;88-&gt;45 MB, 89 MB goal, 24 P
</code></pre><h3 id="2-pprof">2. PProf</h3>
<h4 id="1-how-to-generate-profiling-files">1. How to generate profiling files?</h4>
<p><strong>For go unit tests, use gotest&rsquo;s standard <code>-cpuprofile</code> and <code>-memprofile</code> flags</strong></p>
<p>See <a href="https://pkg.go.dev/cmd/go#hdr-Testing_flags">Testing flags</a></p>
<p>For example, this will run unit tests matchs <code>BinlogIO</code> in package <code>datanode</code>
and generate <code>datanode.test</code>, <code>cpu.prof</code> and <code>mem.prof</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">milvus/internal/datanode$ go test -cpuprofile cpu.prof -memprofile mem.prof -run BinlogIO
</code></pre></div><p><strong>For a standalone program, use <code>runtime/pprof</code></strong></p>
<p>To add equivalent profilling support to a standalone program, add the following codes into your main function[]</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-golang" data-lang="golang"><span style="color:#75715e">// ...
</span><span style="color:#75715e"></span>
<span style="color:#75715e">// ref@[3] https://pkg.go.dev/runtime/pprof#hdr-Profiling_a_Go_program
</span><span style="color:#75715e"></span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">cpuprofile</span> = <span style="color:#a6e22e">flag</span>.<span style="color:#a6e22e">String</span>(<span style="color:#e6db74">&#34;cpuprofile&#34;</span>, <span style="color:#e6db74">&#34;&#34;</span>, <span style="color:#e6db74">&#34;write cpu profile to `file`&#34;</span>)
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">memprofile</span> = <span style="color:#a6e22e">flag</span>.<span style="color:#a6e22e">String</span>(<span style="color:#e6db74">&#34;memprofile&#34;</span>, <span style="color:#e6db74">&#34;&#34;</span>, <span style="color:#e6db74">&#34;write memory profile to `file`&#34;</span>)

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
    <span style="color:#a6e22e">flag</span>.<span style="color:#a6e22e">Parse</span>()
    <span style="color:#66d9ef">if</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">cpuprofile</span> <span style="color:#f92672">!=</span> <span style="color:#e6db74">&#34;&#34;</span> {
        <span style="color:#a6e22e">f</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Create</span>(<span style="color:#f92672">*</span><span style="color:#a6e22e">cpuprofile</span>)
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
            <span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#e6db74">&#34;could not create CPU profile: &#34;</span>, <span style="color:#a6e22e">err</span>)
        }
        <span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">f</span>.<span style="color:#a6e22e">Close</span>() <span style="color:#75715e">// error handling omitted for example
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">pprof</span>.<span style="color:#a6e22e">StartCPUProfile</span>(<span style="color:#a6e22e">f</span>); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
            <span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#e6db74">&#34;could not start CPU profile: &#34;</span>, <span style="color:#a6e22e">err</span>)
        }
        <span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">pprof</span>.<span style="color:#a6e22e">StopCPUProfile</span>()
    }

    <span style="color:#75715e">// ... rest of the program ...
</span><span style="color:#75715e"></span>
    <span style="color:#66d9ef">if</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">memprofile</span> <span style="color:#f92672">!=</span> <span style="color:#e6db74">&#34;&#34;</span> {
        <span style="color:#a6e22e">f</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">os</span>.<span style="color:#a6e22e">Create</span>(<span style="color:#f92672">*</span><span style="color:#a6e22e">memprofile</span>)
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
            <span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#e6db74">&#34;could not create memory profile: &#34;</span>, <span style="color:#a6e22e">err</span>)
        }
        <span style="color:#66d9ef">defer</span> <span style="color:#a6e22e">f</span>.<span style="color:#a6e22e">Close</span>() <span style="color:#75715e">// error handling omitted for example
</span><span style="color:#75715e"></span>        <span style="color:#a6e22e">runtime</span>.<span style="color:#a6e22e">GC</span>() <span style="color:#75715e">// get up-to-date statistics
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">pprof</span>.<span style="color:#a6e22e">WriteHeapProfile</span>(<span style="color:#a6e22e">f</span>); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
            <span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Fatal</span>(<span style="color:#e6db74">&#34;could not write memory profile: &#34;</span>, <span style="color:#a6e22e">err</span>)
        }
    }
}
</code></pre></div><p><strong>For a long-running server, use <code>net/http/pprof</code></strong></p>
<blockquote>
<p>ref: <a href="https://pkg.go.dev/net/http/pprof">https://pkg.go.dev/net/http/pprof</a></p>
</blockquote>
<p>Adding these lines in your  main function:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-golang" data-lang="golang"><span style="color:#f92672">import</span> (
    <span style="color:#e6db74">&#34;fmt&#34;</span>
    <span style="color:#a6e22e">_</span> <span style="color:#e6db74">&#34;net/http/pprof&#34;</span>
    <span style="color:#e6db74">&#34;net/http&#34;</span>
)

<span style="color:#66d9ef">go</span> <span style="color:#66d9ef">func</span>(){
    <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">http</span>.<span style="color:#a6e22e">ListenAndServe</span>(<span style="color:#e6db74">&#34;localhost:9876&#34;</span>, <span style="color:#66d9ef">nil</span>))
}()
</code></pre></div><p>Then use pprof tool to look at the heap profile:</p>
<pre tabindex="0"><code>go tool pprof http://localhost:9876/debug/pprof/heap
</code></pre><p>Or to look at a 30-second CPU profile:</p>
<pre tabindex="0"><code>go tool pprof http://localhost:9876/debug/pprof/profile?seconds=30
</code></pre><p>Or to look at the goroutine blocking profile, after calling <code>runtime.SetBolckProfileRate</code> in your program:</p>
<pre tabindex="0"><code>go tool pprof http://localhost:9876/debug/pprof/block
</code></pre><p>Or to look at the holders of contended mutexes, after calling <code>runtime.SetMutexProfileFraction</code> in your program:</p>
<pre tabindex="0"><code>go tool pprof http://localhost:9876/debug/pprof/mutex
</code></pre><p>The package also exports a handler that serves execution trace data fro the &ldquo;go tool trace&rdquo; command. To collect a
5-second execution trace:</p>
<pre tabindex="0"><code>wget -O trace.out http://localhost:9876/debug/pprof/trace?seconds=5
go tool trace trace.out
</code></pre><p>To view all avaliable profiles, open <code>http://localhost:9876/debug/pprof</code> in your browser.</p>
<h4 id="2-how-to-use-the-generated-profiling-files">2. How to use the generated profiling files?</h4>
<p><strong>Visulization:</strong></p>
<p>This command uses <code>datanode.test</code> (binary) and <code>cpu.prof</code> (profiling file) to exam cpu profilings, and provides web
interface and automaticaly opening a browser at <code>localhost:9999</code></p>
<pre tabindex="0"><code>milvus/internal/datanode$ go tool pprof -http localhost:9999 datanode.test cpu.prof
</code></pre><p>You are able to check everything on the browser, especially graphics, just click around</p>
<p><strong>Command line:</strong></p>
<p>This line will establish an interactive pprof shell</p>
<pre tabindex="0"><code>milvus/internal/datanode$ go tool pprof datanode.test cpu.prof

File: datanode.test
Build ID: 3f1cb676163b24145d3945e5169154a6ce31813d
Type: cpu
Time: Dec 17, 2021 at 4:07pm (CST)
Duration: 301.42ms, Total samples = 50ms (16.59%)
Entering interactive mode (type &quot;help&quot; for commands, &quot;o&quot; for options)
(pprof)
</code></pre><p>Check top10 cum:</p>
<pre tabindex="0"><code>(pprof) top10 -cum
Showing nodes accounting for 20ms, 40.00% of 50ms total
Showing top 10 nodes out of 23
      flat  flat%   sum%        cum   cum%
         0     0%     0%       50ms   100%  github.com/milvus-io/milvus/internal/datanode.(*binlogIO).genInsertBlobs
         0     0%     0%       50ms   100%  github.com/milvus-io/milvus/internal/storage.(*InsertCodec).Serialize
         0     0%     0%       50ms   100%  testing.tRunner
         0     0%     0%       30ms 60.00%  encoding/json.(*encodeState).marshal
         0     0%     0%       30ms 60.00%  encoding/json.(*encodeState).reflectValue
         0     0%     0%       30ms 60.00%  encoding/json.Marshal
      20ms 40.00% 40.00%       30ms 60.00%  encoding/json.compact
         0     0% 40.00%       30ms 60.00%  encoding/json.marshalerEncoder
         0     0% 40.00%       30ms 60.00%  encoding/json.ptrEncoder.encode
         0     0% 40.00%       30ms 60.00%  encoding/json.structEncoder.encode
</code></pre><p><strong>Comparation:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ curl -s http://localhost:9876/debug/pprof/heap &gt; first.heap

<span style="color:#75715e"># sometime later</span>
$ curl -s http://localhost:9876/debug/pprof/heap &gt; second.heap
</code></pre></div><p>Then you can compare them by:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">go tool pprof -base first.heap second.heap
</code></pre></div><p>Please see <a href="https://github.com/google/pprof/blob/master/doc/README.md">pprof README</a> for more <code>pprof</code> details.</p>
<h3 id="3-trace">3. Trace</h3>
<h4 id="1-how-to-generate-trace-files">1. How to generate trace files?</h4>
<p><strong><code>go test -trace</code></strong></p>
<p>Genetage a trace file with <code>go test</code>:</p>
<pre tabindex="0"><code>go test -trace trace.out pkg
</code></pre><p><strong><code>runtime/trace.Start</code></strong></p>
<p><strong><code>net/http/pprof package</code></strong>: see above.</p>
<h4 id="2-how-to-use-trace-file">2. How to use trace file?</h4>
<p>View trace in web browser(<strong>NOET: only tested on <code>Chrome/Chrominum</code></strong>):</p>
<pre tabindex="0"><code>go tool trace trace.out
</code></pre><p>Generate a pprof-like profile from the trace:</p>
<pre tabindex="0"><code>go tool trace -pprof=TYPE trace.out &gt; TYPE.pprof
</code></pre><p>Supported profile tyes are:</p>
<pre tabindex="0"><code>- net: network blocking profile
- sync: synchronization blocking profile
- syscall: syscall blocking profile
- sched: scheduler latency profile
</code></pre><p>Then you can ues the pprof tool to analyze the profile:</p>
<pre tabindex="0"><code>go tool pprof TYPE.pprof
</code></pre><h3 id="4-dlv">4. dlv</h3>
<blockquote>
<p>ref: <a href="https://github.com/go-delve/delve">https://github.com/go-delve/delve</a></p>
</blockquote>
<p>Delve is a debugger for the Go programming language. The goal of the project is to provide a simple, full featured debugging tool for Go.</p>
<h4 id="21-installation">2.1 Installation</h4>
<p>ref <a href="https://github.com/go-delve/delve/tree/master/Documentation/installation">delve install</a></p>
<h3 id="5-gdb">5. gdb</h3>
<hr>
<p><strong>References:</strong></p>
<p>[1] Doc of go testing flags. <em><a href="https://pkg.go.dev/cmd/go#hdr-Testing_flags">https://pkg.go.dev/cmd/go#hdr-Testing_flags</a></em></p>
<p>[2] Doc of <code>net/http/pprof</code>. <em><a href="https://pkg.go.dev/net/http/pprof">https://pkg.go.dev/net/http/pprof</a></em> <code>go doc net/http/pprof</code></p>
<p>[3] Doc of <code>runtime/pprof</code>. <em><a href="https://pkg.go.dev/runtime">https://pkg.go.dev/runtime</a></em>. <code>go doc runtime/pprof</code></p>
<p>[4] Full useage of tool <code>pprof</code>. <em><a href="https://github.com/google/pprof/blob/master/doc/README.md">https://github.com/google/pprof/blob/master/doc/README.md</a></em></p>
<p>[5] Go blog: Profiling Go Programs. <em><a href="https://go.dev/blog/pprof">https://go.dev/blog/pprof</a></em></p>
<p>[6] Doc of <code>cmd/trace</code>. <em><a href="https://pkg.go.dev/cmd/trace">https://pkg.go.dev/cmd/trace</a></em>. <code>go doc cmd/trace</code></p>
<p>[7] Doc of <code>cmd/pprof</code>. <em><a href="https://pkg.go.dev/cmd/pprof">https://pkg.go.dev/cmd/pprof</a></em>. <code>go doc cmd/pprof</code></p>
<p>[8] Doc of <code>runtime/trace</code>. <em><a href="https://pkg.go.dev/runtime/trace">https://pkg.go.dev/runtime/trace</a></em> <code>go doc runtim/trace</code></p>
<p>[9] GopherCon 2017: An Introduction to go tool trace. <em><a href="https://about.sourcegraph.com/go/an-introduction-to-go-tool-trace-rhys-hiltner/">https://about.sourcegraph.com/go/an-introduction-to-go-tool-trace-rhys-hiltner/</a></em></p>
<p>[10] GopherCon 2019: Two Go programs, three different profiling techniques, in 50 miniutes. <a href="https://about.sourcegraph.com/go/gophercon-2019-two-go-programs-three-different-profiling-techniques-in-50-minutes/">link</a>, <a href="https://www.youtube.com/watch?v=nok0aYiGiYA&amp;list=PL2ntRZ1ySWBdDyspRTNBIKES1Y-P__59_&amp;index=9">Youtube</a></p>
]]></content>
        </item>
        
        <item>
            <title>Cgo: All You Need to Know</title>
            <link>https://xuanyang-cn.github.io/posts/2021/02/cgo-all-you-need-to-know/</link>
            <pubDate>Tue, 23 Feb 2021 16:05:20 +0800</pubDate>
            
            <guid>https://xuanyang-cn.github.io/posts/2021/02/cgo-all-you-need-to-know/</guid>
            <description>Cgo Intro Cgo 让 GO 可以调用 C 的代码。
接下来就用一个简单的例子来介绍 Cgo 的用法。
下面 GO 的 rand 包提供了两个方法 Random 和 Seed， 它们分别调用了 C 的 random 和 srandom 方法。
package rand /* #include &amp;lt;stdlib.h&amp;gt; */ import &amp;#34;C&amp;#34; func Random() int { return int(C.random()) } func Seed(i int) { C.srandom(C.uint(i)) } // ref@https://blog.golang.org/cgo 从 import 语句来看，rand 包引入了 &amp;quot;C&amp;quot;， 但是你会发现标准 Go library 里并没有 C 这个库。这是因为 C 是一个伪包 (pesudo-package)，是一个可以被 cgo 解析的特殊名字，用来确定代码里 C 的命名空间。
rand 包用到 C 的地方有 4 个：C.</description>
            <content type="html"><![CDATA[<h2 id="cgo-intro">Cgo Intro</h2>
<p>Cgo 让 GO 可以调用 C 的代码。</p>
<p>接下来就用一个简单的例子来介绍 Cgo 的用法。</p>
<p>下面 GO 的 <code>rand</code> 包提供了两个方法 <code>Random</code> 和 <code>Seed</code>， 它们分别调用了 C 的 <code>random</code> 和 <code>srandom</code> 方法。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#f92672">package</span> <span style="color:#a6e22e">rand</span>

<span style="color:#75715e">/*
</span><span style="color:#75715e">#include &lt;stdlib.h&gt;
</span><span style="color:#75715e">*/</span>
<span style="color:#f92672">import</span> <span style="color:#e6db74">&#34;C&#34;</span>

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">Random</span>() <span style="color:#66d9ef">int</span> {
    <span style="color:#66d9ef">return</span> int(<span style="color:#a6e22e">C</span>.<span style="color:#a6e22e">random</span>())
}

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">Seed</span>(<span style="color:#a6e22e">i</span> <span style="color:#66d9ef">int</span>) {
    <span style="color:#a6e22e">C</span>.<span style="color:#a6e22e">srandom</span>(<span style="color:#a6e22e">C</span>.uint(<span style="color:#a6e22e">i</span>))
}
<span style="color:#75715e">// ref@https://blog.golang.org/cgo
</span></code></pre></div><p>从 <code>import</code> 语句来看，<code>rand</code> 包引入了 <code>&quot;C&quot;</code>， 但是你会发现标准 Go library 里并没有 <code>C</code> 这个库。这是因为 <code>C</code> 是一个伪包 (pesudo-package)，是一个可以被 cgo 解析的特殊名字，用来确定代码里 C 的命名空间。</p>
<p><code>rand</code> 包用到 <code>C</code> 的地方有 4 个：<code>C.random</code>， <code>C.srandom</code>， <code>C.uint(i)</code> 以及 <code>import &quot;C&quot;</code>。</p>
<p>其中，<code>Random()</code> 方法调用了 C 语言标准库的 <code>random()</code> 方法并返回了其返回值。在 C 语言中， <code>random()</code> 方法的返回值是 C 语言的 <code>long</code> （cgo 使用 <code>C.long</code> 来表示）类型，必须将它转换为 Go 语言的类型才能让包外的 Go 代码使用， 普通的 Go 类型转换即可：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">Random</span>() <span style="color:#66d9ef">int</span> {
  <span style="color:#66d9ef">return</span> int(<span style="color:#a6e22e">C</span>.<span style="color:#a6e22e">random</span>())
}
</code></pre></div><p>一个功能相同但是能更清晰展示类型转换过程的代码如下：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">Random</span>() <span style="color:#66d9ef">int</span> {
  <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">r</span> <span style="color:#a6e22e">C</span>.<span style="color:#a6e22e">long</span> = <span style="color:#a6e22e">C</span>.<span style="color:#a6e22e">random</span>()
  <span style="color:#66d9ef">return</span> int(<span style="color:#a6e22e">r</span>)
}
</code></pre></div><p><code>Seed()</code> 方法则展示了相反的类型转换过程。它的输入是 Go 的 <code>int</code> 类型，需要转换成 C 的<code>unsigned int</code> （Cgo 通过 <code>C.uint</code> 来表示）类型，作为 C 的 <code>srandom()</code> 方法的参数传入。</p>
<p>// TODO complete list of these numeric type names.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">Seed</span>(<span style="color:#a6e22e">i</span> <span style="color:#66d9ef">int</span>) {
  <span style="color:#a6e22e">C</span>.<span style="color:#a6e22e">srandom</span>(<span style="color:#a6e22e">C</span>.uint(<span style="color:#a6e22e">i</span>))
}
</code></pre></div><p>这段代码里还有一部分代码我们还没解释，那就是 <code>import</code> 语句上面的注释。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#75715e">/*
</span><span style="color:#75715e">#include &lt;stdlib.h&gt;
</span><span style="color:#75715e">*/</span>
<span style="color:#f92672">import</span> <span style="color:#e6db74">&#34;C&#34;</span>
</code></pre></div><p>Cgo 会读取这段注释：</p>
<ul>
<li>以 <code>#cgo</code> + 空格开头的一行注释，Cgo 会删掉 <code>#cgo</code> 和空格，剩下的作为 Cgo 的配置保留。</li>
<li>剩下的注释行会被当作编译 C 代码时的 header 来使用。</li>
</ul>
<p>在这个例子中，只有 <code>#include</code> 这一行会被识别。<code>#Cgo</code> 后面的代码一般用来给 C 代码的编译器和链接器提供 flags。</p>
<h3 id="strings">Strings</h3>
<p>和 Go 不同的是，C 的 String 是通过 <code>\0</code> 结尾的 char 数组来构成的。Go 和 C 的 String 类型互相转换是由 <code>C.CString()</code>，<code>C.GoString()</code> 和 <code>C.GoStringN()</code> 这几个方法来实现的，转换过程会拷贝 String 数据。</p>
<p>下面这个例子的 <code>Print()</code> 方法调用了 C 的<code>stdio.h</code> 库里的 <code>fputs()</code> 来向标准输出写一个 String。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#f92672">package</span> <span style="color:#a6e22e">print</span>

<span style="color:#75715e">// #include &lt;stdio.h&gt;
</span><span style="color:#75715e">// #include &lt;stdlib.h&gt;
</span><span style="color:#75715e"></span><span style="color:#f92672">import</span> <span style="color:#e6db74">&#34;C&#34;</span>
<span style="color:#f92672">import</span> <span style="color:#a6e22e">unsafe</span>

<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">Print</span>(<span style="color:#a6e22e">s</span> <span style="color:#66d9ef">string</span>) {
  <span style="color:#a6e22e">cs</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">C</span>.<span style="color:#a6e22e">CString</span>(<span style="color:#a6e22e">s</span>)
  <span style="color:#a6e22e">C</span>.<span style="color:#a6e22e">fputs</span>(<span style="color:#a6e22e">cs</span>, (<span style="color:#f92672">*</span><span style="color:#a6e22e">C</span>.<span style="color:#a6e22e">FILE</span>)(<span style="color:#a6e22e">C</span>.<span style="color:#a6e22e">stdout</span>))
  <span style="color:#a6e22e">C</span>.<span style="color:#a6e22e">free</span>(<span style="color:#a6e22e">unsafe</span>.<span style="color:#a6e22e">Pointer</span>(<span style="color:#a6e22e">cs</span>))
}
</code></pre></div><p>Go 的内存管理器无法管理 C 分配的内存，因此当你用 <code>C.CString()</code> 来创建一个 C 的 String （或任何其他 C 的内存分配）时，你必须手动调用 <code>C.free()</code> 来释放这部分的内存。</p>
<p>调用 <code>C.CString()</code> 会返回一个指向 char 数组首地址的指针，所以在函数退出之前我们需要将它转换为 <code>unsafe.Pointer</code> 并且使用 <code>C.free()</code> 释放掉这部分内存。Cgo 的最佳实现中一般会在分配内存的地方立刻使用 <code>defer()</code> 来释放内存，如下面更新的代码：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">Print</span>(<span style="color:#a6e22e">s</span> <span style="color:#66d9ef">string</span>) {
  <span style="color:#a6e22e">cs</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">C</span>.<span style="color:#a6e22e">CString</span>(<span style="color:#a6e22e">s</span>)
  <span style="color:#66d9ef">defer</span>(<span style="color:#a6e22e">C</span>.<span style="color:#a6e22e">free</span>(<span style="color:#a6e22e">unsafe</span>.<span style="color:#a6e22e">Pointer</span>(<span style="color:#a6e22e">cs</span>)))
  <span style="color:#a6e22e">C</span>.<span style="color:#a6e22e">fputs</span>(<span style="color:#a6e22e">cs</span>, (<span style="color:#f92672">*</span><span style="color:#a6e22e">C</span>.<span style="color:#a6e22e">FILE</span>)(<span style="color:#a6e22e">C</span>.<span style="color:#a6e22e">stdout</span>))
}
</code></pre></div><h3 id="build-cgo-packages">Build Cgo packages</h3>
<p>使用 <code>go build</code> 或 <code>go install</code> 就可以编译 Cgo 代码。当 Go 识别出引用了特殊的 <code>&quot;C&quot;</code> 时， 会自动使用 Cgo 来处理这些文件。</p>
<h3 id="总结">总结</h3>
<p>现在我们已经知道了一个正确的 Cgo 代码应该如何组织，Go 如何表示 C 的各种类型、方法，C 和 Go 的 String 类型如何互换，如何编译 Cgo 代码。</p>
<p>这自然而然的引出了下面的几个问题：</p>
<ol>
<li>C 能调用 GO 的方法吗？</li>
<li>C 和 Go 如何传递指针？</li>
<li>我有一个纯 C 的大型项目，可以编译成为静态/动态库，那么我的 Go 如何使用 Cgo 调用这些库？</li>
<li>我没有 C 的项目，但是我有一个 C++ 的项目，那么我的 GO 项目能否/如何使用 Cgo 来调用这个 C++ 的库？</li>
<li>Cgo 编译和链接的原理是什么？它是实现了一套 c 的编译器链接器还是直接使用的 gcc ？</li>
</ol>
<p>我在这里挖个坑，请期待接下来的本文的更新吧！</p>
<h2 id="cgo-advanced">Cgo Advanced</h2>
<h3 id="go-references-to-c">Go references to C</h3>
<h3 id="c-references-to-go">C references to Go</h3>
<h3 id="passing-pointers">Passing pointers</h3>
<h3 id="others">Others</h3>
<h2 id="cpp-yes">CPP? Yes!</h2>
<h2 id="cgo-implementation-details">Cgo Implementation details</h2>
<h2 id="references">References</h2>
<p>[1] <a href="https://blog.golang.org/cgo">https://blog.golang.org/cgo</a>. <em>C? Go? Cgo!</em> Andrew Gerrand. 17 March 2017.</p>
<p>[2] <a href="https://golang.org/cmd/cgo/">https://golang.org/cmd/cgo/</a>. Cgo official doc. Go 1.16.</p>
]]></content>
        </item>
        
        <item>
            <title>Delve Hand Book</title>
            <link>https://xuanyang-cn.github.io/posts/2021/02/delve-hand-book/</link>
            <pubDate>Thu, 18 Feb 2021 15:34:42 +0800</pubDate>
            
            <guid>https://xuanyang-cn.github.io/posts/2021/02/delve-hand-book/</guid>
            <description>Launch a session dlv debug works like go run, it will build an run a GO package
dlv exec will start a seesion with a precompiled binary, in order to properly debug a binary, it shoud be compiled with optimizations disablesd, eg. with -gcflags=&amp;quot;all=-N -l&amp;quot;
dlv attach will attach to a PID of a runnig Go binary
Delve commands in a debugging session print, p
whatis will print the datatype of an expression</description>
            <content type="html"><![CDATA[<h2 id="launch-a-session">Launch a session</h2>
<p><strong><code>dlv debug</code></strong> works like <code>go run</code>, it will build an run a GO package</p>
<p><strong><code>dlv exec</code></strong> will start a seesion with a precompiled binary, in order to properly debug a binary,
it shoud be compiled with optimizations disablesd, eg. with <code>-gcflags=&quot;all=-N -l&quot;</code></p>
<p><strong><code>dlv attach</code></strong> will attach to a PID of a runnig Go binary</p>
<h2 id="delve-commands-in-a-debugging-session">Delve commands in a debugging session</h2>
<p><strong><code>print, p</code></strong></p>
<p><strong><code>whatis</code></strong> will print the datatype of an expression</p>
<p><strong><code>locals</code></strong> will print all variables in the current execution step</p>
<p><strong><code>args</code></strong> will print the current fucntion&rsquo;s arguments</p>
<p><strong><code>vars</code></strong> will print the avaliable package variables</p>
<p><strong><code>funcs</code></strong> will print the avaliable functions</p>
<p><strong><code>types</code></strong> will print the avaliable types</p>
<p><strong><code>list</code></strong> display the code around the current execution step or a specific linespec.</p>
<h2 id="breakpoints">Breakpoints</h2>
<p><strong><code>break, b</code></strong>:</p>
<ul>
<li>Break at a specific line, sucn as <code>break main.go:15</code></li>
<li>Break at a relative point int a file <code>break +5</code></li>
<li>Whenever a function is called or defined, as <code>break main.myfunc</code></li>
</ul>
<p><strong><code>breakpoints, bp</code></strong>: display all breakpoints along with their IDs.</p>
<p><strong><code>condition, cond</code></strong>: set smarter stop conditions and not halt execution in a specific line, but whenever a
given condition is met.</p>
<p><strong><code>clear</code></strong> and <strong><code>clear all</code></strong> can be used to clear a specific or all breakpoints.</p>
<p><strong><code>trace</code></strong>: a breakpoint that doesn&rsquo;t halt execution, but print message whenever eht execution passes
through that point</p>
<h2 id="move-one-step-at-a-time">Move one step at a time!</h2>
<p><strong><code>continue, c</code></strong> runs until the next breakpoint or program termination</p>
<p><strong><code>next, n</code></strong> N steps over N source lines, staying int the same function</p>
<p><strong><code>step, s</code></strong> performs a single step forward in the application. If the next step is another fucntion,
it will descent to its call.</p>
<p><strong><code>stepout, so</code></strong> steps out of the current function</p>
<p><strong><code>restart</code></strong> restart the debugging session, but keeps breakpoints and conditions</p>
]]></content>
        </item>
        
    </channel>
</rss>
