<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hello Friend</title>
    <link>https://xuanyang-cn.github.io/</link>
    <description>Recent content on Hello Friend</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sat, 26 Mar 2022 12:30:00 +0800</lastBuildDate><atom:link href="https://xuanyang-cn.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>WiscKey 论文阅读笔记</title>
      <link>https://xuanyang-cn.github.io/posts/2022/03/wisckey-%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 26 Mar 2022 12:30:00 +0800</pubDate>
      
      <guid>https://xuanyang-cn.github.io/posts/2022/03/wisckey-%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</guid>
      <description>WiscKey 论文阅读笔记 WiscKey: Separating Keys from Values in SSD-conscious Storage
1. 资源 论文：
 Lanyue Lu, Thanumalayan Sankaranarayana Pillai, Andrea C. Arpaci-Dusseau, and Remzi H. Arpaci-Dusseau. 2016. WiscKey: Separating keys from values in SSD-conscious storage. In Proceedings of the 14th USENIX Conference on File and Storage Technologies (FAST’16). https://dl.acm.org/doi/pdf/10.1145/3033273 Lanyue Lu, Thanumalayan Sankaranarayana Pillai, Hariharan Gopalakrishnan, Andrea C. Arpaci- Dusseau, and Remzi H. Arpaci-Dusseau. 2017. WiscKey: Separating keys from values in SSD-conscious storage.</description>
    </item>
    
    <item>
      <title>How To Configure Vim</title>
      <link>https://xuanyang-cn.github.io/posts/2021/04/how-to-configure-vim/</link>
      <pubDate>Mon, 12 Apr 2021 19:34:27 +0800</pubDate>
      
      <guid>https://xuanyang-cn.github.io/posts/2021/04/how-to-configure-vim/</guid>
      <description>This article:
 Assumes you already have some vim experiences. Won&amp;rsquo;t be step-by-step tutorial. Will explain what is happening when you edit ~/.vimrc.  Why VIM？  Better understanding of project structures Better understanding of everything Lightweight Multi-language support Addictive All open-source(except some great but awful plugins) Show off  Why Not VIM?  Learning curve is steep.  Lots of shortcuts to remember Lots of plug-ins to learn. If you don&amp;rsquo;t know it thoroughly, you&amp;rsquo;ll make a mess of yourself.</description>
    </item>
    
    <item>
      <title>Go pprof Ref</title>
      <link>https://xuanyang-cn.github.io/posts/2021/03/go-pprof-ref/</link>
      <pubDate>Fri, 26 Mar 2021 14:52:08 +0800</pubDate>
      
      <guid>https://xuanyang-cn.github.io/posts/2021/03/go-pprof-ref/</guid>
      <description>GCTRACE  gctrace: setting gctrace=1 causes the garbage collector to emit a single line to standard error at each collection, summarizing the amount of memory collected and the length of the pause. The format of this line is subject to change. Currently, it is:
  gc # @#s #%: #+#+# ms clock, #+#/#/#+# ms cpu, #-&amp;gt;#-&amp;gt;# MB, # MB goal, # P where the fields are as follows:
 gc # the GC number, incremented at each GC @#s time in seconds since program start #% percentage of time spent in GC since program start #+.</description>
    </item>
    
    <item>
      <title>Cgo: All You Need to Know</title>
      <link>https://xuanyang-cn.github.io/posts/2021/02/cgo-all-you-need-to-know/</link>
      <pubDate>Tue, 23 Feb 2021 16:05:20 +0800</pubDate>
      
      <guid>https://xuanyang-cn.github.io/posts/2021/02/cgo-all-you-need-to-know/</guid>
      <description>Cgo Intro Cgo 让 GO 可以调用 C 的代码。
接下来就用一个简单的例子来介绍 Cgo 的用法。
下面 GO 的 rand 包提供了两个方法 Random 和 Seed， 它们分别调用了 C 的 random 和 srandom 方法。
package rand  /* #include &amp;lt;stdlib.h&amp;gt; */ import &amp;#34;C&amp;#34;  func Random() int {  return int(C.random()) }  func Seed(i int) {  C.srandom(C.uint(i)) } // ref@https://blog.golang.org/cgo 从 import 语句来看，rand 包引入了 &amp;quot;C&amp;quot;， 但是你会发现标准 Go library 里并没有 C 这个库。这是因为 C 是一个伪包 (pesudo-package)，是一个可以被 cgo 解析的特殊名字，用来确定代码里 C 的命名空间。</description>
    </item>
    
    <item>
      <title>Delve Hand Book</title>
      <link>https://xuanyang-cn.github.io/posts/2021/02/delve-hand-book/</link>
      <pubDate>Thu, 18 Feb 2021 15:34:42 +0800</pubDate>
      
      <guid>https://xuanyang-cn.github.io/posts/2021/02/delve-hand-book/</guid>
      <description>Launch a session dlv debug works like go run, it will build an run a GO package
dlv exec will start a seesion with a precompiled binary, in order to properly debug a binary, it shoud be compiled with optimizations disablesd, eg. with -gcflags=&amp;quot;all=-N -l&amp;quot;
dlv attach will attach to a PID of a runnig Go binary
Delve commands in a debugging session print, p
whatis will print the datatype of an expression</description>
    </item>
    
    <item>
      <title></title>
      <link>https://xuanyang-cn.github.io/about/</link>
      <pubDate>Tue, 19 Jan 2021 10:19:24 +0800</pubDate>
      
      <guid>https://xuanyang-cn.github.io/about/</guid>
      <description>#include &amp;lt;iostream&amp;gt; int main() {  std::cout &amp;lt;&amp;lt; &amp;#34;Nothing is perfect, &amp;#34;  &amp;lt;&amp;lt; &amp;#34;we&amp;#39;re just running out of time.&amp;#34; &amp;lt;&amp;lt; std::endl;  return 0; } What to do next?   Vim Intro (en) Vim Intro (zn) set vim environment in docker (en, zh) Linux Command Line Valgrind Cgo  </description>
    </item>
    
    <item>
      <title>My First Post</title>
      <link>https://xuanyang-cn.github.io/posts/2021/01/my-first-post/</link>
      <pubDate>Mon, 18 Jan 2021 14:32:11 +0800</pubDate>
      
      <guid>https://xuanyang-cn.github.io/posts/2021/01/my-first-post/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
